class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<Integer>[] graph = new ArrayList[numCourses];
        for(int i = 0; i < numCourses; i ++) graph[i] = new ArrayList<>();
        for(int[] course: prerequisites){
            graph[course[0]].add(course[1]);
        }
        int[] visited = new int[numCourses];
        for(int i = 0; i < numCourses; i ++){
            if(dfs(graph, visited, i)) return false;
        }

        return true;
    }

    private boolean dfs(ArrayList<Integer>[] graph, int[] visited, int curr){
        if(visited[curr] == 1) return true;
        if(visited[curr] == 2) return false;

        visited[curr] = 1;
        for(Integer neighbor : graph[curr]){
            if(dfs(graph, visited, neighbor)) return true;
        }
        visited[curr] = 2;
        return false;
    }
}
